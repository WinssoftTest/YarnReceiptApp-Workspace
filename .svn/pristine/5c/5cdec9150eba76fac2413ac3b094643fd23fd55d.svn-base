import { Injectable } from "@angular/core";
import { HttpClient, HttpParams } from "@angular/common/http";
import { appsettings } from "src/app/appsettings";
import { ToastController, LoadingController } from "@ionic/angular";
 
const httpOptions = {
  headers: {
    "Content-Type": "application/json; charset=utf-8",
  },
  params: new HttpParams(),
};
@Injectable({
  providedIn: "root",
})
export class CommonService {
  IP="http://localhost:7362";
  
  constructor(
    public httpClient: HttpClient,
    private toastCtrl: ToastController
  ) {
    this.IP=localStorage.getItem("ipaddress");
    console.log("this.IP",this.IP)
  }
  GetCompanyNameLoad(reqLogin) {
    console.log('Work')

    let ip;
    let postData = JSON.stringify(reqLogin);
    console.log('Data', postData)
    return new Promise((resolve, reject) => {
      this.httpClient
        .post(
         this.IP +  appsettings.CompanyNameLoad1,
          postData,
          httpOptions
        )
        .subscribe(
          (data) => {
            resolve(data);
          },
          (error) => {
            reject(error);
          }
        );
    });
  }
  GetBranchNameLoad(reqLogin) {
    console.log('Work')

  //  let ip="http://localhost:7362";
    let postData = JSON.stringify(reqLogin);
    console.log('Data', postData)
    return new Promise((resolve, reject) => {
      this.httpClient
        .post(
          this.IP +  appsettings.BranchNameLoad,
          postData,
          httpOptions
        )
        .subscribe(
          (data) => {
            resolve(data);
          },
          (error) => {
            reject(error);
          }
        );
    });
  }
  GetUserName(reqLogin) {
   let ip="http://localhost:7362";
   console.log('Work',reqLogin)
  // let postData 
 // postData = (reqLogin);
 let  postData= JSON.stringify(reqLogin)
  // postData =  JSON.parse(JSON.stringify(postData));
   console.log("Data",postData)
   return new Promise((resolve, reject) => {
      this.httpClient
        .post(
          this.IP +  appsettings.UserNameLoad,
          postData,
          httpOptions
        )
     
        .subscribe(
         
          (data) => {
            resolve(data);
          },
          (error) => {
            reject(error);
          }
         
        );
       
    });
   
  }
  GetFinalYearLoad(reqLogin) {
    
    let postData = JSON.stringify(reqLogin);
    return new Promise((resolve, reject) => {
      this.httpClient
        .post(
          this.IP + appsettings.FinYearLoad,
          postData,
          httpOptions
        )
        .subscribe(
          (data) => {
            resolve(data);
          },
          (error) => {
            reject(error);
          }
        );
    });
  }
  GetWareHouseNameLoad(reqLogin) {
   let postData = JSON.stringify(reqLogin);
    return new Promise((resolve, reject) => {
      this.httpClient
        .post(
          this.IP + appsettings.WarehouseNameLoad,
          postData,
          httpOptions
        )
        .subscribe(
          (data) => {
            resolve(data);
          },
          (error) => {
            reject(error);
          }
        );
    });
  }
  GetPartyNameLoad(reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.PartyNameLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
  GetWorkOrderNumberLoad(reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.WorkOrderNumberLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
GetOrderNumberLoad   (reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.OrderNumberLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
  GetOpenFormLoad (reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.OpenFormCardLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
   GetGatepassNo(reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.GatePassNoLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
   YarnReceiptSave(reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.ReceiptSaveLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
   ReceiptGridDetailsLoad(reqLogin) {
    let postData = JSON.stringify(reqLogin);
     return new Promise((resolve, reject) => {
       this.httpClient
         .post(
           this.IP + appsettings.ReceiptGridDetailsLoad,
           postData,
           httpOptions
         )
         .subscribe(
           (data) => {
             resolve(data);
           },
           (error) => {
             reject(error);
           }
         );
     });
   }
  // GetUserNameLoad(reqLogin) {
  //   console.log('Work')

  //      let ip="http://localhost:7362";
  //   let postData = JSON.stringify(reqLogin);
   
  //   return new Promise((resolve, reject) => {
  //     this.httpClient
  //       .post(
  //        ip +  appsettings.UserNameLoad,
  //         postData,
  //         httpOptions
  //       )
  //       .subscribe(
  //         (data) => {
  //           resolve(data);
  //         },
  //         (error) => {
  //           reject(error);
  //         }
  //       );
  //   });
  // }
}
